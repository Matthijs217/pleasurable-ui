{% assign pageTitle = "Vacatures - Dutch Digital Agencies" %}
{% render 'partials/head.liquid', pageTitle: pageTitle %}
<script src="scripts/script.js" defer></script>

{% render 'partials/header.liquid' %}


<section class="hero">
    {% render 'partials/backtohome-redirect.liquid' %}
    <h1>VACATURES</h1>
    <p>Verslim je carrière bij de beste digitale bureaus van Nederland. Pak je rol als developer of designer,
        researcher, als scrum master of marketeer, als strateeg. Start of groei door – en laat zien wat je kan.</p>
</section>


<main class="vacancies-container">
    {% render 'partials/list-table.liquid', vacatures: vacatures %}

    <details class="add-vacancie">
        <summary>Vacature toevoegen</summary>
        <form class="form-container" action="/" method="post" data-enhanced="form">
            <button class="close-btn" type="button">close</button>

            <label for="titel">titel
                <input required type="text" name="title">
            </label>

            <label for="agency_id">agency id fdnd=90
                <input required type="text" name="agency_id">
            </label>

            <label for="hours">hours
                <input required type="text" name="hours">
            </label>

            <label for="location">location
                <input required type="text" name="location">
            </label>

            <button class="submit-form" type="submit">
                <div class="loader"></div>
                <span class="btn-text">submit</span>
            </button>
        </form>
    </details>

    <div class="succes-box" hidden="true">
        <h6>Succes!</h6>
        <p class="succes-message">Vacature toegevoegd!</p>
    </div>
</main>

<script type="module">

  // Als er ergens op de pagina een formulier wordt gesubmit..
  // (We maken hier gebruik van Event Delegation)
  document.addEventListener('submit', async function(event) {

    // Hou in een variabele bij welk formulier dat was
    const form = event.target
    const submitBtn = document.querySelector('.submit-form')
    const loader = submitBtn.querySelector('.loader')
    const btnTxt = submitBtn.querySelector('.btn-text')

    // Als dit formulier geen data-enhanced attribuut heeft, doe dan niks speciaals (laat het formulier normaal versturen)
    // Dit doen we, zodat we sommige formulieren op de pagina kunnen 'enhancen'
    // Door ze bijvoorbeeld data-enhanced="true" of data-enhanced="formulier-3" te geven.
    // Data attributen mag je zelf verzinnen: https://developer.mozilla.org/en-US/docs/Learn_web_development/Howto/Solve_HTML_problems/Use_data_attributes
    if (!form.hasAttribute('data-enhanced')) {
      return
    }

    // Voorkom de standaard submit van de browser
    // Let op: hiermee overschrijven we de default Loading state van de browser...
    event.preventDefault()

    // Toont de loading state met de tekst op de button
    btnTxt.innerHTML = 'Aan het toevoegen...';
    loader.classList.add('show');
    loader.classList.remove('hide');


    // Verzamel alle formuliervelden van het formulier
    let formData = new FormData(form)

    // En voeg eventueel de name en value van de submit button toe aan die data
    // https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent/submitter
    // if (event.submitter) {
    //   formData.append(event.submitter.name, event.submitter.value)
    // }

    // Doe een fetch naar de server, net als hoe de browser dit normaal zou doen
    // Gebruik daarvoor het action en method attribuut van het originele formulier
    // Inclusief alle formuliervelden
    const response = await fetch(form.action, {
      method: form.method,
      body: new URLSearchParams(formData)
    })

    // De server redirect op de normale manier, en geeft HTML terug
    // (De server weet niet eens dat deze fetch via client-side JavaScript gebeurde)
    const responseText = await response.text()

    // Normaal zou de browser die HTML parsen en weergeven, maar daar moeten we nu zelf iets mee
    // Parse de nieuwe HTML en maak hiervan een nieuw Document Object Model in het geheugen
    const parser = new DOMParser()
    const responseDOM = parser.parseFromString(responseText, 'text/html')

    console.log(responseDOM)

    // Zoek in die nieuwe HTML DOM onze nieuwe UI state op, die we via Liquid hebben klaargemaakt
    // We gebruiken hiervoor het eerdere data-enhanced attribuut, zodat we weten waar we naar moeten zoeken
    // In de nieuwe HTML zoeken we bijvoorbeeld naar data-enhanced="true" of data-enhanced="formulier-3"
    // (Hierdoor kunnen we ook meerdere formulieren op dezelfde pagina gebruiken)
    const newState = responseDOM.querySelector('[data-enhanced="' + form.getAttribute('data-enhanced') + '"]')
    const newVacancie = responseDOM.querySelector('.vacancies li:last-of-type')
    const details = document.querySelector("details");

    submitBtn.innerHTML = 'submit';
    details.removeAttribute('open')

    // loading state weg
    loader.classList.remove('show');
    loader.classList.add('hide');

    // Overschrijf ons formulier met de nieuwe HTML
    // Hier wil je waarschijnlijk de Loading state vervangen door een Success state
    form.outerHTML = newState.outerHTML
    let newVacancies = document.querySelector('.vacancies')
    newVacancies.insertAdjacentHTML("beforeend", newVacancie.outerHTML);

    // succes state toegevoegd
    const succesBox = document.querySelector('.succes-box')
    succesBox.classList.add('show')

    setTimeout(() => {
        succesBox.classList.remove('show');
    }, 2400);

  })

</script>

{% render 'partials/footer.liquid' %}